"""1. Реализовать класс Matrix (матрица).
Конструктор класса __init__() должен принимать список списков чисел для задания превоначального состояния матрицы.
Подсказка: матрица — это таблица размером N строк на M столбцов (размерность N x M).
Примеры матриц: 3 на 2, 3 на 3, 2 на 4.

| 31 22 |
| 37 43 |
| 51 86 |

| 3 5 32 |
| 2 4 6 |
| -1 64 -8 |

| 3 5 8 3 |
| 8 3 7 1 |
В методе __init__() надо проверить корректность передаваемых данных - все списки должны быть
одинаковой длины.
В случае расхождения выбрасывать исключение ValueError с соответствующим описанием.
Добавить метод __add__() сложения двух матриц. Складывать можно матрицы одинаковой размерности.
В случае, когда пользователь пытается сложить матрицы разных размеров выбросить исключение ValueError.
В результате сложения двух матриц должна образоваться новая матрица размером N x M, где каждый
элемент в ячейке i,j образован сложением значений из соответствующих ячеек исходных матриц.
Реализовть метод __str__(), возвращающий строку вида " 1 2 3\n 4 5 6", отводя под числа по три
разряда, чтобы для небольших чисел матрица выглядела как таблица.
Создать три матрицы (две одинаковые по размеру и одну с другим размером).
Сложить одинаковые матрицы и потом сложить разные. Напечатать исходные таблицы и результат
сложения."""


class Matrix:
    def __init__(self, lst):
        self._matrix = lst
        self._columns = len(lst[0]) if len(lst) > 0 else 0
        self._lines = len(lst)

    def __setattr__(self, key, value):
        if key != '_matrix' or len(value) < 1:
            self.__dict__[key] = value
            return
        first = len(value[0])
        for i in value[1:]:
            if first != len(i):
                raise ValueError('Списки должны быть одинаковой длины!')
        self.__dict__[key] = value

    def __add__(self, other):
        if not isinstance(other, type(self)) or self._lines != other._lines or self._columns != other._columns:
            raise ValueError('Складывать можно матрицы только одинакового размера!')
        add_matrix = Matrix([[self._matrix[i][j] + other._matrix[i][j] for j in range(self._columns)]
                             for i in range(self._lines)])
        return add_matrix

    def __str__(self):
        print_str = ''
        for i in self._matrix:
            for j in i:
                print_str += f'{j: 5d} '
                # здесь 5, чтобы красиво выводились матрицы-суммы, в которых при сложении могут получиться
                # 4значные числа. И/или для чисел со знаком
            print_str += '\n'
        return print_str[:-1]


m1 = Matrix([[1, 2], [3, -4], [-990, -700]])
m2 = Matrix([[-1, 20], [3, 40], [-100, -999]])
m3 = Matrix([[2, 3], [2, 6], [4, 10], [3, 67]])

print('первая------------')
print(m1)
print('вторая------------')
print(m2)
print('их сумма----------')
print(m1 + m2)
print('------------------')
print(m1 + m3)
